#version 450 core

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer Pos1
	{ vec4 Position_In[]; };
layout(std430, binding = 1) buffer Vel1
	{ vec4 Velocity_In[]; };
layout(std430, binding = 2) buffer Pos2
	{ vec4 Position_Out[]; };
layout(std430, binding = 3) buffer Vel2
	{ vec4 Velocity_Out[]; };

layout (binding = 4, offset = 0) uniform atomic_uint Count;

uniform uint LastCount;
uniform uint MaximumCount;
uniform float DeltaT;
uniform uint spawnCount;

uniform vec3 startPos;
uniform vec3 startVel;

const float TTL_new = 10;

// https://thebookofshaders.com/10/
float random (vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

float random(float f1, float f2) {
	return random(vec2(f1,f2));
}

vec3 randomV (float dt) {
	return vec3(random(dt, dt+0.1452f), random(dt+1.2f, dt+3.7f), random(dt+10.44f, dt+32.4f));
}

void addParticleToOutputList(vec3 pos, vec3 vel, float TTL){
	uint nr = atomicCounterIncrement(Count);

	if (nr >= MaximumCount) {
		atomicCounterDecrement(Count);
		return;
	}

	Position_Out[nr] = vec4(pos, TTL);
	Velocity_Out[nr] = vec4(vel, 0);
}

void main() {
	uint idx = gl_GlobalInvocationID.x; //one dimensional

	if (idx >= (LastCount + spawnCount)) return;

	//todo: efficiency??

	vec3 r = randomV(DeltaT);

	vec3 pos = startPos;

	float f = 0.3;

	vec3 velocity = startVel * 0.1f + r * f - vec3(f / 2.f);
	float TTL = TTL_new;

	if (idx < LastCount) {
		//update old
		velocity = Velocity_In[idx].xyz;
		pos = Position_In[idx].xyz;
		TTL = Position_In[idx].w;
	}

	TTL -= DeltaT;

	velocity *= pow(0.7f, DeltaT);
	pos += DeltaT * velocity;


	if (TTL > 0) {
		addParticleToOutputList(pos, velocity, TTL);
	}
}